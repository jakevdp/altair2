import collections
import inspect
import json

import jsonschema
import six


class UndefinedType(object):
    """A singleton object for marking undefined attributes"""
    __instance = None
    def __new__(cls, *args, **kwargs):
        if not isinstance(cls.__instance, cls):
            cls.__instance = object.__new__(cls, *args, **kwargs)
        return cls.__instance
    def __repr__(self):
        return 'Undefined'
Undefined = UndefinedType()


def hash_schema(schema, use_json=True,
                exclude_keys=['definitions', 'description', '$schema']):
    """
    Compute a python hash for a nested dictionary which
    properly handles dicts, lists, sets, and tuples.

    At the top level, the function excludes from the hashed schema all keys
    listed in `exclude_keys`.

    This implements two methods: one based on conversion to JSON, and one based
    on recursive conversions of unhashable to hashable types; the former seems
    to be slightly faster in several benchmarks.
    """
    if exclude_keys:
        schema = {key: val for key, val in schema.items()
                  if key not in exclude_keys}
    if use_json:
        s = json.dumps(schema, sort_keys=True)
        return hash(s)
    else:
        def _freeze(val):
            if isinstance(val, dict):
                return frozenset((k, _freeze(v)) for k, v in val.items())
            elif isinstance(val, set):
                return frozenset(map(_freeze, val))
            elif isinstance(val, list) or isinstance(val, tuple):
                return tuple(map(_freeze, val))
            else:
                return val
        return hash(_freeze(schema))


class SchemaHashRegistry(type):
    """
    A metaclass for SchemaBase which does one thing: every derived class will
    be added to a _schema_registry dict, with a key generated by the
    _json_schema_hash() class method. The goal is that given any schema, one
    can quickly locate any previously defined class that wraps that schema.
    This is required for the ``from_dict`` functionality in SchemaBase.
    """
    def __init__(cls, name, bases, dct):
        if not hasattr(cls, '_schema_registry'):
            # this is the base class.  Initialize the registry
            cls._schema_registry = collections.defaultdict(list)
        else:
            # this is a derived class.  Add cls to the registry
            cls._schema_registry[cls._json_schema_hash()].append(cls)
        super(SchemaHashRegistry, cls).__init__(name, bases, dct)


@six.add_metaclass(SchemaHashRegistry)
class SchemaBase(object):
    """Base class for schema wrappers.

    Each derived class should set the _json_schema class attribute which is
    used for validation. Optionally, you can also specialize define the
    __init__ function with appropriate properties.
    """
    _json_schema = {}
    _attr_names_to_ignore = ('_attr_names_to_ignore', '_json_schema',
                             '_schema_registry')

    def __init__(self, **kwds):
        for key, val in kwds.items():
            setattr(self, key, val)

    @classmethod
    def _json_schema_hash(cls):
        """Return a unique hash of this class' _json_schema"""
        return hash_schema(cls._json_schema)

    def __attrs(self):
        """Return a list of instance attributes"""
        members = inspect.getmembers(self, lambda a: not inspect.isroutine(a))
        return [name for name, val in members
                if not (name.startswith('__') and name.endswith('__'))
                and name not in self._attr_names_to_ignore]

    def __attr_dict(self):
        """return a dicitionary of attributes to values"""
        return {attr: getattr(self, attr) for attr in self.__attrs()}

    def to_dict(self, validate=True):
        """Return a dictionary representation of the object

        Parameters
        ----------
        validate : boolean
            If True (default), then validate the output dictionary
            against the schema.

        Returns
        -------
        dct : dictionary
            The dictionary representation of this object

        Raises
        ------
        jsonschema.ValidationError :
            if validate=True and the dict does not conform to the schema
        """
        dct = {attr: (val.to_dict(validate=validate)
                      if isinstance(val, SchemaBase) else val)
               for attr, val in self.__attr_dict().items()
               if val is not Undefined}
        if validate:
            jsonschema.validate(dct, self._json_schema)
        return dct

    @classmethod
    def from_dict(cls, dct, validate=True):
        """Construct class from a dictionary representation

        Parameters
        ----------
        dct : dictionary
            The dict from which to construct the class
        validate : boolean
            If True (default), then validate the output dictionary
            against the schema.

        Returns
        -------
        obj : Schema object
            The wrapped schema

        Raises
        ------
        jsonschema.ValidationError :
            if validate=True and dct does not conform to the schema
        """
        # TODO: implement additionalProperties & patternProperties
        if validate:
            jsonschema.validate(dct, cls._json_schema)
        props = cls._json_schema.get('properties', {})
        hashes = {prop: hash_schema(val) for prop, val in props.items()}
        matches = {prop: cls._schema_registry[hash_]
                   for prop, hash_ in hashes.items()}
        wrappers = {prop: match[0] for prop, match in matches.items() if match}
        dct = {key: wrappers[key].from_dict(val) if key in wrappers else val
               for key, val in dct.items()}
        return cls(**dct)
