import collections

import jsonschema

from .utils import hash_schema, resolve_references


class UndefinedType(object):
    """A singleton object for marking undefined attributes"""
    __instance = None
    def __new__(cls, *args, **kwargs):
        if not isinstance(cls.__instance, cls):
            cls.__instance = object.__new__(cls, *args, **kwargs)
        return cls.__instance
    def __repr__(self):
        return 'Undefined'
Undefined = UndefinedType()


class SchemaBase(object):
    """Base class for schema wrappers.

    Each derived class should set the _json_schema class attribute which is
    used for validation. If not specified in the class definition, an
    appropriate __init__ function will be generated by SchemaBaseMeta.
    """
    __schema = {}

    def __init__(self, *args, **kwds):
        # Two valid options for initialization, which should be handled by
        # derived classes:
        # - a single arg with no kwds, for, e.g. {'type': 'string'}
        # - zero args with zero or more kwds for {'type': 'object'}
        assert len(args) == (0 if kwds else 1)
        self.__args = args
        self.__kwds = kwds

    def __getattr__(self, item):
        # reminder: getattr is called after the normal lookups
        return self.__kwds[item]

    def __setattr__(self, item , val):
        if item in ['_SchemaBase__args', '_SchemaBase__kwds']:
            object.__setattr__(self, item, val)
        else:
            self.__kwds[item] = val

    def __getitem__(self, item):
        return self.__kwds[item]

    def __setitem__(self, item, val):
        self.__kwds[item] = val

    def __repr__(self):
        val = self.__args
        dct = self.__kwds
        if dct:
            args = ("{0}: {1!r}".format(key, val)
                    for key, val in dct.items()
                    if val is not Undefined)
            args = '\n' + ',\n'.join(args)
            args = args.replace('\n', '\n  ')
            return "<{0} {{{1}\n}}>".format(self.__class__.__name__, args)
        else:
            return "<{0}({1})>".format(self.__class__.__name__, val[0])

    def __get_schema(self):
        """
        Return the schema defined in this class, if it exists, or an empty dict.
        """
        return getattr(self, '_{0}__schema'.format(self.__class__.__name__), {})

    def to_dict(self, validate=True, **kwds):
        """Return a dictionary representation of the object

        Parameters
        ----------
        validate : boolean
            If True (default), then validate the output dictionary
            against the schema.

        Returns
        -------
        dct : dictionary
            The dictionary representation of this object

        Raises
        ------
        jsonschema.ValidationError :
            if validate=True and the dict does not conform to the schema
        """
        def _todict(val):
            if isinstance(val, SchemaBase):
                # only validate at the top level
                return val.to_dict(validate=False)
            elif isinstance(val, list):
                return [_todict(v) for v in val]
            elif isinstance(val, dict):
                return {k: _todict(v) for k, v in val.items()}
            else:
                return val

        dct = {attr: _todict(v)
               for attr, v in self.__kwds.items()
               if v is not Undefined and kwds.get(attr, True)}
        val = self.__args

        if val and len(dct) > 0:
            raise ValueError("{0} instance has both a value and properties : "
                             "cannot serialize to dict")

        if val:
            result = _todict(val[0])
        else:
            result = _todict(dct)

        if validate:
            jsonschema.validate(result, self.__get_schema())
        return result

    @classmethod
    def from_dict(cls, dct, validate=True):
        """Construct class from a dictionary representation

        Parameters
        ----------
        dct : dictionary
            The dict from which to construct the class
        validate : boolean
            If True (default), then validate the output dictionary
            against the schema.

        Returns
        -------
        obj : Schema object
            The wrapped schema

        Raises
        ------
        jsonschema.ValidationError :
            if validate=True and dct does not conform to the schema
        """
        converter = _FromDict(SchemaBase.__subclasses__())
        return converter.from_dict(cls, dct, validate=validate)


class _FromDict(object):
    def __init__(self, class_list):
        # Create a mapping of a schema hash to a list of matching classes
        # This lets us quickly determine the correct class to construct
        self.class_dict = collections.defaultdict(list)
        for cls in class_list:
            self.class_dict[hash_schema(self._get_schema(cls))].append(cls)

    def _get_schema(self, cls, resolve_refs=False):
        # "private" variable name mangling
        schema = getattr(cls, '_{0}__schema'.format(cls.__name__), {})
        if resolve_refs:
            schema = resolve_references(schema)
        return schema

    def from_dict(self, cls, dct, validate=True):
        # TODO: implement additionalProperties & patternProperties
        # TODO: do something more than simply selecting the last match?
        schema = self._get_schema(cls)
        if validate:
            jsonschema.validate(dct, self._get_schema(cls))
        schema = resolve_references(schema)

        if 'anyOf' in schema or 'oneOf' in schema:
            schemas = schema.get('anyOf', []) + schema.get('oneOf', [])
            for schema in schemas:
                # TODO: in the no-match case, call from_dict on dict/list contents
                matches = self.class_dict[hash_schema(schema)]
                if not matches:
                    continue
                try:
                    return self.from_dict(matches[-1], dct, validate=True)
                except TypeError:
                    continue
                except jsonschema.ValidationError:
                    continue

        if isinstance(dct, dict):
            props = schema.get('properties', {})
            hashes = {prop: hash_schema(val) for prop, val in props.items()}
            matches = {prop: self.class_dict[hash_] for prop, hash_ in hashes.items()}
            wrappers = {prop: match[-1] for prop, match in matches.items() if match}
            kwds = {key: (self.from_dict(wrappers[key], val, validate=False)
                          if key in wrappers else val)
                    for key, val in dct.items()}
            return cls(**kwds)
        elif isinstance(dct, list):
            if 'items' in schema:
                hash_ = hash_schema(schema['items'])
                wrapper = self.class_dict[hash_]
            else:
                wrapper = []

            if wrapper:
                return cls([self.from_dict(wrapper[-1], val, validate=False)
                            for val in dct])

        return cls(dct)
